/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * To learn more about Gradle by exploring our Samples at https://docs.gradle.org/8.5/samples
 */

plugins {
    // Implicitly applies Java plugin and Distribution plugin
    id 'application'
    id 'com.google.protobuf' version '0.9.4'
    id 'checkstyle'
    id 'jacoco' // jacocoTestReport task
    id 'me.champeau.jmh' version '0.7.2' // jmh task
}

repositories {
    maven {
        // The google mirror is less flaky than mavenCentral()
        url 'https://maven-central.storage-download.googleapis.com/maven2/'
    }
    mavenCentral()
    mavenLocal()
}

def grpcVersion = '1.60.0'
def protobufVersion = '3.24.0'
def protocVersion = protobufVersion

dependencies {
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-services:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    compileOnly 'org.apache.tomcat:annotations-api:6.0.53'

    runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"

    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
    testImplementation 'com.code-intelligence:jazzer-junit:+'
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

startScripts.enabled = false

// Creates start scripts for a class name and adds it to the distribution. The
// base class name is used to name the task and scripts. For example, passed
// the class crypto.CryptoServer, it creates the task
// cryptoServer with script name crypto-server.
def createStartScripts(String mainClassName) {
    String bareName = mainClassName.substring(mainClassName.lastIndexOf('.') + 1);
    String taskName = bareName.uncapitalize();
    def newTask = tasks.register(taskName, CreateStartScripts) {
        mainClass = mainClassName
        applicationName = taskName.replaceAll('([A-Z])') { '-' + it[0].uncapitalize() }
        outputDir = new File(project.buildDir, 'tmp/scripts/' + name)
        classpath = startScripts.classpath
    }
    application {
        applicationDistribution.into('bin') {
            from(newTask)
            fileMode = 0755
        }
    }
}

createStartScripts('crypto.CryptoServer')
createStartScripts('crypto.CryptoClient')

// --- Testing ---

test {
    useJUnitPlatform()

    testLogging {
        showStandardStreams = true
    }

    finalizedBy jacocoTestReport // report is always generated after tests run
    jacoco {
        // Exclude generated grpc classes from coverage analysis,
        // these are built classes location (the classes lie in build/classes/java/main).
        // NOTE:
        // + These are not the generated java files which lie in
        //   build/generated/source/proto/main/grpc or
        //   build/generated/source/proto/main/java
        // + There is no '.class' needed at the end of each excluded class
        // + The '$' symbol indicates the inner class of the class whose name is the preceding string
        // By default, Jacoco would ignore any class annotated with @Generated annotation,
        // here class CryptoGrpc has already been automatically annotated with @Generated annotation
        // when build build/generated/source/proto/main/grpc/CryptoGrpc.java is generated,
        // BUT, the inner classes are not annotated by @Generated annotation,
        // so they should be manually specified.
        excludes = [
            'crypto/CryptoGrpc$*',
            'crypto/CryptoOuterClass',
            'crypto/CryptoOuterClass$*'
        ]
    }

    // Fuzz testing
    // https://github.com/CodeIntelligenceTesting/jazzer?tab=readme-ov-file#junit-5
    // Command line example: JAZZER_FUZZ=1 ./gradlew test --tests <filtered_fuzzing_test> -PSILIENCE_LOG

    // Optionally turn off java.util.logging
    if (project.hasProperty('SILIENCE_LOG')) {
        systemProperty 'java.util.logging.config.file', "${sourceSets.test.resources.srcDirs.first()}/silence.logging.properties"
    }
}

// --- Checkstyle ---

// https://stackoverflow.com/a/67513272/12141366
checkstyle {
    def checkstyleJar = configurations.checkstyle.resolvedConfiguration.getFiles().find {
        it.name.startsWith("checkstyle")
    }
    config = resources.text.fromArchiveEntry(checkstyleJar, "google_checks.xml")
}

tasks.withType(Checkstyle) {
    // https://github.com/gradle/gradle/issues/3417#issuecomment-379306780
    exclude { element -> element.file.path.contains('build/generated') }
}

// --- Code coverage ---

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report

    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }

    // Although these classes have been exclude by Jacoco in the instrumentation phase (configured above),
    // but they still present in the report phase, albeit their stats are trash ones,
    // below configuration excludes them completely from the generated report.
    // Here we specify the .class files we want to exclude,
    // the wildcard '*' can match inner classes also (without the need of '$' symbol).
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                'crypto/CryptoGrpc*.class',
                'crypto/CryptoOuterClass*.class'
            ])
        }))
    }
}
