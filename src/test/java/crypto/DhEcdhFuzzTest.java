package crypto;

import static org.junit.jupiter.api.Assumptions.assumeFalse;

import com.code_intelligence.jazzer.api.FuzzedDataProvider;
import com.code_intelligence.jazzer.junit.FuzzTest;
import crypto.CryptoOuterClass.CipherSuite;
import java.security.KeyPair;
import java.security.PublicKey;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.KeyAgreement;

class DhEcdhFuzzTest {
  private static final Logger logger = Logger.getLogger(DhEcdhFuzzTest.class.getName());

  record InitData(DiffieHellman algoInst, KeyPair clientKeyPair) {}

  /** Algorithm choosing and client generates its' key pair. */
  InitData dh_ecdh_init(CipherSuite cipherSuite, boolean initClientKeyPair) {
    DiffieHellman algoInst = null;
    KeyPair clientKeyPair = null;
    switch (cipherSuite) {
      case DH:
        algoInst = DiffieHellman.getInstance();
        clientKeyPair = algoInst.generateKeyPair(2048);
        break;
      case ECDH:
        algoInst = EllipticCurveDiffieHellman.getInstance();
        clientKeyPair = EllipticCurveDiffieHellman.getInstance().generateKeyPair("secp256r1");
        break;
      default:
        assumeFalse(true);
    }
    if (clientKeyPair == null) {
      assumeFalse(true);
    }
    return new InitData(algoInst, clientKeyPair);
  }

  void dh_ecdh_client_receives_public_key_from_server(
      CipherSuite cipherSuite, FuzzedDataProvider data) {
    InitData initData = dh_ecdh_init(cipherSuite, true);
    DiffieHellman algoInst = initData.algoInst();
    KeyPair clientKeyPair = initData.clientKeyPair();
    // Client creates key agreement based on the generated key pair
    KeyAgreement clientKeyAgreement = algoInst.getKeyAgreement(clientKeyPair);
    if (clientKeyAgreement == null) {
      assumeFalse(true);
    }
    // Server sends its' public key to client
    byte[] serverPublicKeyBuf = data.consumeRemainingAsBytes();
    // Client receives server's public key
    PublicKey serverPublicKey = algoInst.getPeerPublicKey(serverPublicKeyBuf);
    if (serverPublicKey == null) {
      return;
    }
    // Client verify server public key before generating shared secret
    boolean nextPhaseOk = algoInst.doPhase(clientKeyAgreement, serverPublicKey);
    if (!nextPhaseOk) {
      return;
    }
    // Client generates shared secret
    byte[] clientSharedSecret = clientKeyAgreement.generateSecret();
    logger.log(
        Level.INFO,
        "Shared secret generated by client: " + Util.toHexString(clientSharedSecret, ":"));
  }

  void dh_ecdh_server_receives_public_key_from_client(
      CipherSuite cipherSuite, FuzzedDataProvider data) {
    InitData initData = dh_ecdh_init(cipherSuite, false);
    DiffieHellman algoInst = initData.algoInst();
    // Client sends its' public key to server
    byte[] clientPublicKeyBuf = data.consumeRemainingAsBytes();
    // Server receives client's public key
    PublicKey clientPublicKey = algoInst.getPeerPublicKey(clientPublicKeyBuf);
    if (clientPublicKey == null) {
      return;
    }
    // Server generates its' public key base on client's public key
    KeyPair serverKeyPair = algoInst.generateKeyPair(clientPublicKey);
    if (serverKeyPair == null) {
      return;
    }
    // Server sends its' public key to client
    byte[] serverPublicKeyBuf = serverKeyPair.getPublic().getEncoded();
    logger.log(Level.INFO, "Server's public key: " + Util.toHexString(serverPublicKeyBuf));
    // Server creates key agreement based on the generated key pair
    KeyAgreement keyAgreement = algoInst.getKeyAgreement(serverKeyPair);
    if (keyAgreement == null) {
      return;
    }
    // Server verify client public key before generating shared secret
    boolean doPhaseOk = algoInst.doPhase(keyAgreement, clientPublicKey);
    if (!doPhaseOk) {
      return;
    }
    // Server generates shared secret
    byte[] serverSharedSecret = keyAgreement.generateSecret();
    logger.log(
        Level.INFO,
        "Shared secret generated by server: " + Util.toHexString(serverSharedSecret, ":"));
  }

  @FuzzTest
  void dh_client(FuzzedDataProvider data) {
    dh_ecdh_client_receives_public_key_from_server(CipherSuite.DH, data);
  }

  @FuzzTest
  void dh_server(FuzzedDataProvider data) {
    dh_ecdh_server_receives_public_key_from_client(CipherSuite.DH, data);
  }

  @FuzzTest
  void ecdh_client(FuzzedDataProvider data) {
    dh_ecdh_client_receives_public_key_from_server(CipherSuite.ECDH, data);
  }

  @FuzzTest
  void ecdh_server(FuzzedDataProvider data) {
    dh_ecdh_server_receives_public_key_from_client(CipherSuite.ECDH, data);
  }
}
